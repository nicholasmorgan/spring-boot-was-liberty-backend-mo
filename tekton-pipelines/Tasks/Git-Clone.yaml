apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  params:
    - description: git url to clone
      name: url
      type: string
    - default: master
      description: "git revision to checkout (branch, tag, sha, refâ€¦)"
      name: revision
      type: string
    - default: ""
      description: (optional) git refspec to fetch before checking out revision
      name: refspec
      type: string
    - default: "true"
      description: defines if the resource should initialize and fetch the submodules
      name: submodules
      type: string
    - default: "1"
      description: >-
        performs a shallow clone where only the most recent commit(s) will be
        fetched
      name: depth
      type: string
    - default: "true"
      description: >-
        defines if http.sslVerify should be set to true or false in the global
        git config
      name: sslVerify
      type: string
    - default: ""
      description: subdirectory inside the "output" workspace to clone the git repo into
      name: subdirectory
      type: string
    - default: "false"
      description: >-
        clean out the contents of the repo's destination directory (if it
        already exists) before trying to clone the repo there
      name: deleteExisting
      type: string
  results:
    - description: The precise commit SHA that was fetched by this Task
      name: commit
  steps:
    - image: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.12.0"
      name: clone
      resources: {}
      script: |
        CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"
        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
          # or the root of a mounted volume.
          if [[ -d "$CHECKOUT_DIR" ]] ; then
            echo "Delete non-hidden files and directories."
            rm -rf "$CHECKOUT_DIR"/*
            echo "Delete files and directories starting with . but excluding .."
            rm -rf "$CHECKOUT_DIR"/.[!.]*
            echo "Delete files and directories starting with .. plus any other character"
            rm -rf "$CHECKOUT_DIR"/..?*
          fi
        }
        if [[ "$(params.deleteExisting)" == "true" ]] ; then
          echo "Cleaning out working directory."
          cleandir
        fi
        echo "Executing git-init..."
        /ko-app/git-init \
          -url "$(params.url)" \
          -revision "$(params.revision)" \
          -refspec "$(params.refspec)" \
          -path "$CHECKOUT_DIR" \
          -sslVerify="$(params.sslVerify)" \
          -submodules="$(params.submodules)" \
          -depth "$(params.depth)"
        echo "git-init completed."
        echo "Getting the git SHA signature..."
        cd "$CHECKOUT_DIR"
        RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
        echo "Writing the SHA signature to $(results.commit.path)"
        # Make sure we don't add a trailing newline to the result!
        echo -n "$RESULT_SHA" > $(results.commit.path)
  workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      name: output
